<?php declare(strict_types=1);

namespace Pim\Upgrade\Schema;

use Akeneo\Test\Integration\TestCase;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Schema\AbstractSchemaManager;
use PHPUnit\Framework\Assert;
use Pim\Upgrade\Schema\Tests\ExecuteMigrationTrait;

final class Version_5_0_20200313130000_create_audit_product_table_Integration extends TestCase
{
    use ExecuteMigrationTrait;

    private const MIGRATION_LABEL = '_5_0_20200313130000_create_audit_product_table';

    /** @var Connection */
    private $dbalConnection;

    /** @var AbstractSchemaManager */
    private $schemaManager;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->dbalConnection = $this->get('database_connection');
        $this->schemaManager  = $this->dbalConnection->getSchemaManager();
    }

    protected function getConfiguration()
    {
        return $this->catalog->useMinimalCatalog();
    }

    public function test_it_creates_the_audit_product_table(): void
    {
        $this->ensureAuditProductTableDoesNotExist();

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertTrue($this->schemaManager->tablesExist('akeneo_connectivity_connection_audit_product'));
        $this->assertAuditProductTableColumns();
        $this->assertAuditProductTablePrimaryKey();
    }

    public function test_it_does_not_break_if_audit_product_table_already_exists(): void
    {
        $this->ensureAuditProductTableExists();

        $this->reExecuteMigration(self::MIGRATION_LABEL);
    }

    public function test_it_drops_the_legacy_audit_table_if_it_already_exists(): void
    {
        $this->ensureAuditTableExists();
        $this->assertTrue($this->schemaManager->tablesExist('akeneo_connectivity_connection_audit'));

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertFalse($this->schemaManager->tablesExist('akeneo_connectivity_connection_audit'));
    }

    public function test_it_does_not_break_if_audit_table_does_not_exist(): void
    {
        $this->ensureAuditTableDoesNotExist();
        $this->assertFalse($this->schemaManager->tablesExist('akeneo_connectivity_connection_audit'));

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertFalse($this->schemaManager->tablesExist('akeneo_connectivity_connection_audit'));
    }

    private function ensureAuditProductTableDoesNotExist(): void
    {
        $this->dbalConnection->executeQuery('DROP TABLE IF EXISTS akeneo_connectivity_connection_audit_product');
    }

    private function ensureAuditProductTableExists(): void
    {
        $this->dbalConnection->executeQuery('CREATE TABLE IF NOT EXISTS akeneo_connectivity_connection_audit_product (connection_code VARCHAR(100))');
    }

    private function ensureAuditTableExists(): void
    {
        $this->dbalConnection->executeQuery('CREATE TABLE IF NOT EXISTS akeneo_connectivity_connection_audit (connection_code VARCHAR(100))');
    }

    private function ensureAuditTableDoesNotExist(): void
    {
        $this->dbalConnection->executeQuery('DROP TABLE IF EXISTS akeneo_connectivity_connection_audit');
    }

    private function assertAuditProductTableColumns(): void
    {
        $expectedColumnsAndTypes = [
            'connection_code' => 'string',
            'event_datetime'  => 'datetime',
            'event_count'     => 'integer',
            'event_type'      => 'string',
            'updated'         => 'datetime',
        ];

        $tableColumns = $this->schemaManager->listTableColumns('akeneo_connectivity_connection_audit_product');
        $this->assertCount(count($expectedColumnsAndTypes), $tableColumns);
        foreach ($tableColumns as $actualColumn) {
            $actualColumnsAndTypes[$actualColumn->getName()] =  $actualColumn->getType()->getName();
        }
        Assert::assertEquals($expectedColumnsAndTypes, $actualColumnsAndTypes);
    }

    private function assertAuditProductTablePrimaryKey(): void
    {
        $expectedPk = ['event_datetime', 'connection_code', 'event_type'];

        $indexes = $this->schemaManager->listTableIndexes('akeneo_connectivity_connection_audit_product');
        $this->assertArrayHasKey('primary', $indexes);
        $pkIndex = $indexes['primary'];

        $this->assertTrue($pkIndex->isPrimary());
        $this->assertEquals($expectedPk, $pkIndex->getColumns());
    }
}
